name: Build with Gradle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run Gradle build
        run: ./gradlew build -x test

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Run tests
        run: ./gradlew test

  sonarcloud:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Run SonarQube analysis
        run: ./gradlew sonarqube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  push_to_docker:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: XML generation
      run: ./gradlew test

    - name: Run bootJar
      run: ./gradlew bootJar
      
    - name: List current directory
      run: ls -al
      
    - name: List output of build
      run: ls -al build/libs/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile
        tags: jakidaboii/spring-petclinic:latest
        push: true
        load: false


  build-and-push:
      needs: push_to_docker
      runs-on: ubuntu-latest
      steps:

        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up JDK 17
          uses: actions/setup-java@v2
          with:
            java-version: '17'
            distribution: 'adopt'
    
        - name: Run bootJar
          run: ./gradlew bootJar
  
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
  
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: eu-north-1

        - name: Login to Amazon ECR
          uses: aws-actions/amazon-ecr-login@v1
          
        - name: Build and push Docker image
          uses: docker/build-push-action@v2
          with:
            context: .
            file: Dockerfile
            push: true
            tags: 339712705537.dkr.ecr.eu-north-1.amazonaws.com/pet-clinic:latest
            load: false
  
        - name: Verify Docker Configuration
          run: docker info
  
        - name: Non-Interactive Docker Login Check
          run: echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
          env:
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}  
            DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3

      - name: Install required Ansible collections
        run: ansible-galaxy collection install community.aws

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Run Ansible playbook
        run: ansible-playbook deploy_to_ecs.yml -vvv
